name: Continuous Integration - CI

on:
  push:
    branches: 
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: "*/3 * * * *"

jobs:
  lint_continuous_integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Updated to latest stable version

      - name: Set up Python
        uses: actions/setup-python@v3  # Updated to latest stable version
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install flake8
        run: pip install flake8

      - name: Install pylint
        run: pip install pylint

      - name: Lint with flake8
        run: flake8 .  # Running flake8 on all Python files in the repository

      - name: Lint with pylint
        run: pylint **/*.py  # Lint all Python files in the repository

      - name: Check for "uld_raw" in Python files
        run: |
          shopt -s globstar  # Enable globstar for recursive file matching
          if grep -r "uld_raw" **/*.py; then
            echo "Error: 'uld_raw' found in one or more Python files."
            exit 1  # This will fail the job if "uld_raw" is found
          fi
        shell: /usr/bin/bash -e {0}  # Ensure bash shell is used

      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Ensure code is checked out
 
      - name: Set up Python
        uses: actions/setup-python@v3  # Ensure the correct version of Python is used
        with:
          python-version: '3.8'
 
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
 
      - name: Run tests with pytest
        run: |
          pytest --maxfail=1 --disable-warnings -q  # Modify with your test runner and options
 
      - name: Run tests with unittest (optional, if you're using unittest)
        run: |
          python -m unittest discover -s tests  # Adjust test discovery directory if needed

  discord_webhook:
    name: Send Webhook Notification
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Ensure code is checked out

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      - name: Install requests
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Send Discord Webhook
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          python -c "
          import requests
          import json
          
          # URL do webhook do Discord
          webhook_url = '${{ secrets.DISCORD_WEBHOOK_URL }}'
          
          # Mensagem que você quer enviar
          message = {
              'content': 'Sua mensagem aqui!'
          }
          
          # Enviando a requisição POST para o webhook
          response = requests.post(webhook_url, data=json.dumps(message), headers={'Content-Type': 'application/json'})
          
          # Verificando se a requisição foi bem-sucedida
          if response.status_code == 204:
              print('Mensagem enviada com sucesso!')
          else:
              print(f'Falha ao enviar mensagem. Status Code: {response.status_code}')
          "
