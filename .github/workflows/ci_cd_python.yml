name: Continuous Integration - CI

on:
  push:
    branches: 
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: "5 12 * * *"  # Executa todos os dias Ã s 12:05 PM
    #- cron: "*/3 * * * *"
    

jobs:
  lint_continuous_integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Updated to latest stable version

      - name: Set up Python
        uses: actions/setup-python@v3  # Updated to latest stable version
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install flake8
        run: pip install flake8

      - name: Install pylint
        run: pip install pylint

      - name: Lint with flake8
        run: flake8 .  # Running flake8 on all Python files in the repository

      - name: Lint with pylint
        run: pylint **/*.py  # Lint all Python files in the repository

      - name: Check for "uld_raw" in Python files
        run: |
          shopt -s globstar  # Enable globstar for recursive file matching
          if grep -r "uld_raw" **/*.py; then
            echo "Error: 'uld_raw' found in one or more Python files."
            exit 1  # This will fail the job if "uld_raw" is found
          fi
        shell: /usr/bin/bash -e {0}  # Ensure bash shell is used

      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Ensure code is checked out
 
      - name: Set up Python
        uses: actions/setup-python@v3  # Ensure the correct version of Python is used
        with:
          python-version: '3.8'
 
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
 
      #- name: Run tests with pytest
      #  run: |
      #    pytest --maxfail=1 --disable-warnings -q  # Modify with your test runner and options
 
      #- name: Run tests with unittest (optional, if you're using unittest)
      #  run: |
      #    python -m unittest discover -s tests  # Adjust test discovery directory if needed

  discord_webhook:
    name: Send Webhook Notification
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Ensure code is checked out

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      - name: Install requests
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run Python code inline
        run: |
          python -c "
          import sys
          print('Hello from Python! Version:', sys.version)
          "

      - name: Install requests
        run: pip install requests
        
      - name: Run Python code inline
        run: |
          python -c "
          import sys
          import json
          import requests
          
          # URL of the Discord webhook
          webhook_url = 'https://discord.com/api/webhooks/1285654063169540156/NnZO27R4tdxsJp-j9fDa8cOjcGIg1l7sGzm_sZs95E4KY7D360CR8UOVo6Omyyxk4zOv'
  
          # Data to send in the webhook
          data = {
            'content': 'Hello from GitHub Actions! Version: ' + sys.version
          }
  
          # Send a POST request to the webhook
          response = requests.post(webhook_url, json=data)
  
          # Print response from the server (optional)
          print('Response status code:', response.status_code)
          print('Response content:', response.text)
          "
